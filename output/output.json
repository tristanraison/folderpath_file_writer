{"/Users/tristanraison/Desktop/projet_perso/python/immo_seloger/functions/dashboard_functions.py": "import pandas as pd\nimport os\nimport plotly.express as px\n\nfrom dash import html, dcc\nfrom dash.dependencies import Input, Output\n\nfrom functions.visualization_functions import create_distribution_price_per_meter_graph, create_bar_hist_advert_per_city, generate_component\n\n\ndef create_layout(app, rent_data, sale_data):\n    options = [{\"label\": \"Sale\", \"value\": \"sale\"},\n               {\"label\": \"Rent\", \"value\": \"rent\"},\n               {\"label\": \"All\", \"value\": \"all\"},]\n\n    @app.callback(\n        Output(\"graph\", \"children\"),\n        [Input(\"property-type\", \"value\")],\n    )\n    def update_graph(selected_value):\n        # call function to generate HTML component based on selected value\n        component = generate_component(selected_value, sale_data, rent_data)\n\n        # return HTML component\n        return component\n\n    return html.Div(\n        [\n            html.H1(\"Estate Dashboard\", style={\"textAlign\": \"center\"}),\n            html.Div(\n                [\n                    html.Div(\n                        [\n                            html.Label(\"Select Sale or Rent\"),\n                            dcc.Dropdown(\n                                id=\"property-type\",\n                                options=options,\n                                value=\"sale\",\n                                className=\"dark-dropdown\",\n                                style={\"width\": \"100%\",\n                                       \"margin-bottom\": \"20px\"}\n                            ),\n                        ],\n                        className=\"dropdown-container\",\n                    ),\n                ], className=\"top-container\",\n            ),\n            html.Div(\n                # [\n                #     dcc.Graph(id=\"graph\", style={\n                #         \"width\": \"90%\",\n                #         \"display\": \"inline-block\",\n                #         \"margin-bottom\": \"20px\"}),\n                # ],\n                id=\"graph\",\n                className=\"graph-container\",\n            ),\n\n        ],\n        className=\"dashboard\",\n    )\n\n\ndef create_sale_figure(sale_dataset):\n    # create a sample figure for sale data\n    fig = create_distribution_price_per_meter_graph(sale_dataset)\n    return fig\n\n\ndef create_rent_figure(rent_dataset):\n    # create a sample figure for rent data\n    fig = create_distribution_price_per_meter_graph(rent_dataset)\n    return fig\n\n\ndef create_all_figure(sale_dataset, rent_dataset):\n    # create a sample figure for all data\n    return {}\n\n# define the callbacks\n", "/Users/tristanraison/Desktop/projet_perso/python/immo_seloger/functions/dataProcess.py": "import plotly.express as px\nimport pandas as pd\n\nfrom functions.functions_utils import check_variable_exists\n\n\ndef mainDataProcess(dataset):\n    return 1\n\n\ndef create_ppsm_hist(data):\n    fig = px.histogram(data, x=\"price_per_meter\",\n                       color=\"address\", template=\"plotly_dark\")\n    return fig\n\n\ndef create_ppsm_bar(data):\n    fig = px.bar(data, x='address', y='price_per_meter',\n                 template=\"plotly_dark\")\n    return fig\n\n\ndef aggregate_data_by_city(dataframe):\n    \"\"\"\n    Aggregates a dataframe by city.\n\n    Args:\n        dataframe (pandas.DataFrame): The dataframe to be aggregated. It must have an \"address\" column.\n\n    Returns:\n        pandas.DataFrame: A new dataframe with the aggregated data.\n    \"\"\"\n\n    # Group the dataframe by city and calculate the mean price per meter, the number of ads, and the median size of the apartment.\n    agg_df = dataframe.groupby(\"address\").agg(\n        price_per_meter_mean=(\"price_per_meter\", \"mean\"),\n        ad_count=(\"estate_type_id\", \"count\"),\n        apartment_size_median=(\"area\", \"median\"),\n    )\n\n    return agg_df.to_dict('records')\n", "/Users/tristanraison/Desktop/projet_perso/python/immo_seloger/functions/functions_utils.py": "import os\nimport datetime\nimport pandas as pd\n\n\ndef getDataFileName(excel_file_name, folderPath):\n    # Chemin du dossier Output\n    workinkDirectoryPath = os.getcwd()\n\n    # Chemin d'acc\u00e8s et nom du fichier Excel\n    now_date = datetime.datetime.now().strftime(\"%Y_%m_%d\")\n    excel_file_name = excel_file_name + now_date + \".xlsx\"\n\n    output_filePath = os.path.join(folderPath, excel_file_name)\n\n    return output_filePath\n\n\ndef export_to_excel(dataframe, outputFolderPath, outputFileName):\n    file_path = getDataFileName(\n        excel_file_name=outputFileName, folderPath=outputFolderPath)\n    writer = pd.ExcelWriter(file_path, engine='xlsxwriter')\n    dataframe.to_excel(writer, index=False)\n    writer.save()\n\n\ndef create_directory(path, folder_name):\n    if not os.path.exists(path):\n        return f\"Error: The path {path} does not exist.\"\n    elif not os.path.isdir(path):\n        return f\"Error: {path} is not a directory.\"\n    else:\n        folder_path = os.path.join(path, folder_name)\n        if not os.path.exists(folder_path):\n            os.makedirs(folder_path)\n            return f\"The folder {folder_name} has been created in {path}.\"\n        else:\n            return f\"The folder {folder_name} already exists in {path}.\"\n\n\ndef convertXlsxToPd(xlsxFilePath):\n\n    return -1\n\n\ndef check_variable_exists(df, var_name):\n    \"\"\"\n    Check if the specified var_name is present in the dataframe.\n\n    Args:\n        df (pandas.DataFrame): The dataframe to check.\n        col_name (str): The name of the column to look for.\n\n    Returns:\n        bool: True if the var_name is present in the dataframe, False otherwise.\n    \"\"\"\n    try:\n        df[var_name]\n        return True\n    except KeyError:\n        print(var_name + \" unfound var\")\n        return False\n", "/Users/tristanraison/Desktop/projet_perso/python/immo_seloger/functions/importData.py": "import gspread\nfrom oauth2client.service_account import ServiceAccountCredentials\nimport os\nimport pandas as pd\nfrom functions.functions_utils import export_to_excel\n\n\ndef mainImportData(googleKeyJsonFilePath, googleDataFileUrl, output_folder_path, virginDateFileName):\n    \"\"\"\n    Imports data from the specified Google Sheet data file using the specified Google key JSON file path and output folder path.\n    Uses the importDataFromGoogleSheet() function to import the data and save it as a CSV file with the specified file prefix.\n\n    Args:\n        google_key_json_file_path (str): The file path for the Google key JSON file.\n        google_data_file_url (str): The URL for the Google Sheet data file.\n        output_folder_path (str): The folder path for saving the imported data file.\n        file_prefix (str): The prefix to use for the imported data file.\n\n    Returns:\n        None\n    \"\"\"\n\n    google_data = importDataFromGoogleSheet(\n        googleKeyJsonFilePath, googleDataFileUrl)\n    df = pd.DataFrame(google_data)\n\n    export_to_excel(df,\n                    output_folder_path,\n                    virginDateFileName)\n\n\ndef importDataFromGoogleSheet(googleKeyJsonFilePath, googleDataFileUrl):\n    \"\"\"\n    Imports data from a Google Sheet using the specified key JSON file path and data file URL.\n    Saves the imported data as a CSV file in the specified output folder path using the specified file prefix.\n\n    Args:\n        google_key_json_file_path (str): The file path for the Google key JSON file.\n        google_data_file_url (str): The URL for the Google Sheet data file.\n        output_folder_path (str): The folder path for saving the imported data file.\n        file_prefix (str): The prefix to use for the imported data file.\n\n    Returns:\n        None\n    \"\"\"\n    if os.path.exists(googleKeyJsonFilePath):\n        print(\"file exist\")\n    else:\n        print(\"file does not exist\")\n\n    try:\n        scope = ['https://www.googleapis.com/auth/drive']\n        # create the credentials object\n        creds = ServiceAccountCredentials.from_json_keyfile_name(\n            googleKeyJsonFilePath, scope)\n\n        # authorize the client sheet\n        client = gspread.authorize(creds)\n\n        # open the google sheet\n        sheet = client.open_by_url(googleDataFileUrl).sheet1\n\n        # get all the data from the sheet\n        data = sheet.get_all_records()\n\n        print(\n            \"Data successfully imported from ${googleDataFileUrl} google sheet\")\n\n        return data\n    except Exception as e:\n        print(\n            f\"An error occurred while importing data from {googleDataFileUrl}: {str(e)}\")\n\n\ndef getDatedOutputFile(_folderPath, _dateToFind):\n    \"\"\"\n    Gets the latest dated output file in the specified output folder path with the specified file prefix.\n\n    Args:\n        output_folder_path (str): The folder path for the output files.\n        file_prefix (str): The prefix of the output files.\n\n    Returns:\n        pandas.DataFrame: The latest dated output file as a Pandas DataFrame.\n    \"\"\"\n    files = os.listdir(_folderPath)\n    if len(files) < 1:\n        print(\"no file found\")\n        return None\n    for file_name in files:\n        if _dateToFind in file_name:\n            data = pd.read_excel(os.path.join(_folderPath, file_name))\n            return data\n    return None\n", "/Users/tristanraison/Desktop/projet_perso/python/immo_seloger/functions/visualization_functions.py": "\nimport plotly.express as px\nimport dash\n\nfrom functions.functions_utils import check_variable_exists\nfrom functions.dataProcess import aggregate_data_by_city\n\nfrom dash import dcc, html, dash_table\nimport pandas as pd\n\n\ndef create_histogram(data, x_var, color_var):\n    \"\"\"\n    Creates a histogram using the specified dataset, x variable name, and color variable name.\n\n    Args:\n    - data: pandas DataFrame containing the dataset\n    - x_var: string representing the name of the variable to use for the x-axis\n    - color_var: string representing the name of the variable to use for the color scale\n\n    Returns:\n    - fig: plotly figure object containing the histogram\n    \"\"\"\n    if check_variable_exists(data, x_var):\n        fig = px.histogram(data, x=x_var, color=color_var,\n                           template=\"plotly_dark\")\n        return fig\n    else:\n        return None\n\n\ndef create_bar_histogram(data, x_var, y_var, color_var):\n    if check_variable_exists(data, x_var):\n        fig = px.bar(data, x=x_var, y=y_var, color=color_var,\n                     template=\"plotly_dark\")\n        return fig\n    else:\n        return None\n\n\ndef create_distribution_price_per_meter_graph(data):\n    \"\"\"\n    Creates a price per meter graph using the specified dataset.\n\n    Args:\n    - data: pandas DataFrame containing the dataset\n\n    Returns:\n    - fig: plotly figure object containing the price per meter graph\n    \"\"\"\n    fig = create_histogram(data, \"price_per_meter\", \"address\")\n    return fig\n\n\n# def create_bar_hist_price_per_meter_graph(data):\n#     \"\"\"\n#     Creates a price per meter graph using the specified dataset.\n\n#     Args:\n#     - data: pandas DataFrame containing the dataset\n\n#     Returns:\n#     - fig: plotly figure object containing the price per meter graph\n#     \"\"\"\n#     fig = create_bar_histogram(\n#         data, \"price_per_meter\", \"estate_type_id\",  \"address\")\n#     return fig\n\n\ndef create_bar_hist_advert_per_city(data):\n    \"\"\"\n    Creates graph showing number of adverts by city using the specified dataset.\n\n    Args:\n    - data: pandas DataFrame containing the dataset\n\n    Returns:\n    - fig: plotly figure object containing the count of ad per city\n    \"\"\"\n    fig = create_bar_histogram(data, \"address\", \"estate_type_id\", \"address\")\n    return fig\n\n\ndef generate_component(selected_value, sale_data, rent_data):\n    # create different components based on selected value\n    if selected_value == \"sale\":\n        # generate HTML component for sale data\n        chart1 = dcc.Graph(\n            id='sale-chart1',\n            figure=create_bar_hist_advert_per_city(sale_data))\n        chart2 = dcc.Graph(\n            id='sale-chart2', figure=create_distribution_price_per_meter_graph(sale_data))\n        # table = dash_table.DataTable(\n        #     id='sale-table', data=aggregate_data_by_city(sale_data))\n        text = html.P('This is a paragraph of text for sale data.')\n        headline = html.H3('Sale Data')\n        component = html.Div(\n            [headline, text, chart1, chart2], style={\"width\": \"100%\"})\n\n    elif selected_value == \"rent\":\n        # generate HTML component for rent data\n        chart1 = dcc.Graph(\n            id='rent-chart1', figure=create_bar_hist_advert_per_city(rent_data))\n        chart2 = dcc.Graph(\n            id='rent-chart2', figure=create_distribution_price_per_meter_graph(rent_data))\n        # table = dash_table.DataTable(\n        #     id='rent-table', data=aggregate_data_by_city(rent_data))\n        text = html.P('This is a paragraph of text for rent data.')\n        headline = html.H3('Rent Data')\n        component = html.Div(\n            [headline, text, chart1, chart2], style={\"width\": \"100%\"})\n\n    else:\n        # generate HTML component for all data\n        chart1 = dcc.Graph(\n            id='all-chart1',\n            figure=create_bar_hist_advert_per_city(sale_data))\n        chart2 = dcc.Graph(\n            id='all-chart2', figure=create_distribution_price_per_meter_graph(sale_data))\n        text = html.P('This is a paragraph of text for all data.')\n        # table = dash_table.DataTable(\n        #     id='rent-table', data=aggregate_data_by_city(rent_data))\n        headline = html.H3('All Data')\n        component = html.Div(\n            [headline, text, chart1, chart2], style={\"width\": \"100%\"})\n\n    return component\n", "/Users/tristanraison/Desktop/projet_perso/python/immo_seloger/assets/dashboardStyle.css": "/* dark mode */\nbody {\n    background-color: #1f1f1f;\n    color: #f5f5f5;\n}\n\n/* change the color of the H1 element */\nh1 {\n    color: #f5f5f5;\n}\n\n/* change the color of the text of the graph */\n.plotly-graph-div>.plot-bg {\n    fill: #000000;\n}\n\n.top-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 50px;\n}\n\n.dropdown-container {\n    width: 50%;\n    margin-right: 20px;\n}\n\n.graph-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n\n/* Style the dropdown menu */\n.dark-dropdown .Select-control {\n    background-color: rgb(0, 0, 0);\n    color: #3e339c;\n}\n\n/* Style the options in the dropdown menu */\n.dark-dropdown .Select-menu-outer {\n    background-color: #000000;\n    color: #3e339c;\n}\n\n/* Style the selected option in the dropdown menu */\n.dark-dropdown .Select-value-label {\n    background-color: #000000;\n    color: #3e339c;\n}"}